# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
high_score = 0
lives = 3
time = 0
started = False
EXPLOSION_CENTER = [50, 50]
EXPLOSION_SIZE = [100, 100]
EXPLOSION_DIM = [9, 9]
explosion_frames = 75
score_count = 0

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# most art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://fc04.deviantart.net/fs70/f/2012/290/6/a/twin_nebulas_by_huntere15-d5i4huj.png")
# all credit for the background art goes to the artist from the url

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://i.imgur.com/mPpXzT9.png?1")
# art taken from https://springloadedgames.wordpress.com/2012/08/21/super-game-iv-book-report/

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot1.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/explosion.hasgraphics.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.thrust = False
    # thrusting method
    def draw(self,canvas):
        if self.thrust == False:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, [self.image_center[0] + self.image_size[0], self.image_center[0]], self.image_size, self.pos, self.image_size, self.angle)
#            canvas.draw_circle(self.pos, self.radius, 1, "White", "White")
            

    def update(self):
        # calculate the angle 
        self.angle += self.angle_vel
        
        # calculate forward vector 
        forward = angle_to_vector(self.angle)
        
        # position update
#        self.vel[0] = 1
        self.pos[0] += self.vel[0]
        self.pos[0] %= WIDTH # modulo is used to for screen wrap logic
        self.pos[1] += self.vel[1]
        self.pos[1] %= HEIGHT
                    
        if self.thrust == True:
            ship_thrust_sound.play()
            self.vel[0] += forward[0] * 0.1
            self.vel[1] += forward[1] * 0.1
        else:
            ship_thrust_sound.pause()
            ship_thrust_sound.rewind()
        
        # logic for friction
        self.vel[0] *= 0.99
        self.vel[1] *= 0.99

    # turning methods
    def increment(self):
        self.angle_vel += 0.06
    def decrement(self):
        self.angle_vel -= 0.06
    
    def shoot(self):
        global a_missile
        forward = angle_to_vector(self.angle)
        mis_x = self.pos[0] + self.radius * forward[0]
        mis_y = self.pos[1] + self.radius * forward[1]
        mis_xy = [mis_x, mis_y]
        mis_vel_x = self.vel[0] + 10 * forward[0]
        mis_vel_y = self.vel[1] + 10 * forward[1]
        mis_vel_xy = [mis_vel_x, mis_vel_y]
        a_missile = Sprite(mis_xy, mis_vel_xy, self.angle, 0, missile_image, missile_info, missile_sound)
        
        if len(missile_group) < 10:
               missile_group.add(a_missile)
                
    def get_pos(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        if not self.animated: 
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
        else:
             if self.age < explosion_frames:
                 explosion_index = [time % EXPLOSION_DIM[0], (time // EXPLOSION_DIM[0]) % EXPLOSION_DIM[1]]
                 canvas.draw_image(self.image, 
                        [EXPLOSION_CENTER[0] + explosion_index[0] * EXPLOSION_SIZE[0], 
                         EXPLOSION_CENTER[1] + explosion_index[1] * EXPLOSION_SIZE[1]], 
                         EXPLOSION_SIZE, self.pos, EXPLOSION_SIZE)
   
    def update(self):
        self.angle += self.angle_vel
        self.pos[0] += self.vel[0]
        self.pos[0] %= WIDTH # modulo is used to for screen wrap logic
        self.pos[1] += self.vel[1]
        self.pos[1] %= HEIGHT
        self.age += 1
        if self.age >= self.lifespan:
            return True
        
    def get_pos(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
        
    def collide(self, other_object):
        if (self.get_radius() + other_object.get_radius()) > dist(other_object.get_pos(), self.get_pos()):
            collide = True
        else:
                collide = False
        return collide
# mouseclick handlers that reset UI and conditions whether splash image is drawn
def click(pos):
    global started
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True
           
def draw(canvas):
    global time, started, rock_group, lives, score, high_score, score_count
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    # draw ship and sprites
    my_ship.draw(canvas)
    # a_rock.draw(canvas)
    process_sprite_group(rock_group, canvas)
    process_sprite_group(exp_group, canvas)
    process_sprite_group(missile_group, canvas)
    #a_missile.draw(canvas)
    
    # update ship and sprites
    my_ship.update()
    a_rock.update()
    a_missile.update()
    if group_collide(rock_group, my_ship):
        lives -= 1

    if group_group_collide(rock_group, missile_group):
        score_count += 1
        score += 1
        
    # gives a life to the play everytime the play scores fifty points.
    if score_count >= 50:
        lives += 1
        score_count = 0

    if lives == 0:
        soundtrack.pause()
        soundtrack.rewind()
        if score > high_score:
            high_score = score
        started = False
        lives = 3
        score = 0
        rock_group = set()
        print 'High Score:',high_score
    
    score_pos = [630, 60]
    score_col = 'cornflowerblue'
    score_size = 20
    canvas.draw_text('Score: ' + str(score), score_pos, score_size, score_col)
    canvas.draw_text('Lives: ' + str(lives), [score_pos[0] - 600, score_pos[1]], score_size, score_col)
    canvas.draw_text('High Score:' + str(high_score), [score_pos[0], score_pos[1] - 30], score_size, score_col)
    
# draw splash screen if not started
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
    else:
        soundtrack.play()

# keyboard handlers
def keydown(key):
    if key == simplegui.KEY_MAP['left']:
        my_ship.decrement()
    if key == simplegui.KEY_MAP['right']:
        my_ship.increment()
    if key == simplegui.KEY_MAP['up']:
        my_ship.thrust = True
    if key == simplegui.KEY_MAP['space']:
        my_ship.shoot()
def keyup(key):
    if key == simplegui.KEY_MAP['left']:
        my_ship.increment()
    if key == simplegui.KEY_MAP['right']:
        my_ship.decrement()
    if key == simplegui.KEY_MAP['up']:
        my_ship.thrust = False
            
# timer handler that spawns a rock
count = 0
def rock_spawner():
    global rock_group, count
    a_rock = Sprite([random.randrange(0, WIDTH), random.randrange(0, HEIGHT)], [random.randrange(-1, 2 ) * (time * 0.001), random.randrange(-1, 2)], 0, random.random() * 0.2 - 0.1 , asteroid_image, asteroid_info)
    
    if len(rock_group) < 12 and started:
        # logic so that rocks don't spawn directly on the ship
        if (((my_ship.get_radius()+ a_rock.get_radius()) + 10 < dist(a_rock.get_pos(), my_ship.get_pos()))):  
            rock_group.add(a_rock)
            count +=1
        # print 'rock spawned', count
        
def process_sprite_group(sprites, canvas):
    for sprite in sprites:
        sprite.draw(canvas)
        if sprite.update():
            sprites.remove(sprite)
            
def group_collide(group, other_object):
    collisions = 0
    for sprite in set(group):
        if sprite.collide(other_object):
            collisions += 1
            explosion = Sprite(sprite.get_pos(),[0, 0], 0, 0, explosion_image, explosion_info, explosion_sound)
            exp_group.add(explosion)
            group.remove(sprite)
    return collisions

def group_group_collide(group1, group2):
    collisions = 0
    for sprite in set(group1):
         if group_collide(group2, sprite) > 0:
            collisions += 1
            group1.remove(sprite)
    return collisions
            
# initialize frame
frame = simplegui.create_frame("RiceRocks", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
a_rock = Sprite([WIDTH / 3, HEIGHT / 3], [1, 1], 0, 0, asteroid_image, asteroid_info)
a_missile = Sprite([2 * WIDTH / 3, 2 * HEIGHT / 3], [-1,1], 0, 0, missile_image, missile_info, missile_sound)
rock_group = set()
exp_group = set()
missile_group = set()

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)
frame.add_label('Welcome! To "RiceRocks" this is an Asteroids clone.')
frame.add_label('')
frame.add_label("Click the splash screen to start. Use your arrow keys to control the ship's movement and spacebar to shoot.")
frame.add_label('')
frame.add_label('Everytime you gain 50 points, you will gain an additional life.')
frame.add_label('')
frame.add_label('Notes: This game was designed to function in Chrome although other browsers may work. Your high score will not be saved once you close the window. To stop any game sounds from playing just close the codeskulptor window.')

timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()

