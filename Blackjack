# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
end = False

player_pos = [150, 300]
dealer_pos =[player_pos[0], player_pos[1] - 200]

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        # create Hand object
        self.cards = []

    def __str__(self):
        # return a string representation of a hand
        in_hand = ''
        for i in self.cards:
            in_hand += str(i) + ' '
        return 'Hand contains ' + in_hand
        

    def add_card(self, card):
        self.cards.append(card)
        return self

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand, see Blackjack video
        hand_value = 0
        hand_rank = ''
        
        for i in self.cards:
            hand_value += VALUES[i.rank]
            hand_rank += i.rank
            
        if 'A' in hand_rank and hand_value + 10 <= 21:
            return hand_value + 10
        else:
            return hand_value
                
         
            
   
    def draw(self, canvas, pos):
        pass # draw a hand on the canvas, use the draw method for cards
        
        
# define deck class 
class Deck:
    def __init__(self):
        # create a Deck object
        self.cards = []
        
        for rank in range(len(RANKS)):
            for suit in range(len(SUITS)):
                i = Card(SUITS[suit], RANKS[rank])
                self.cards.append(i)

    def shuffle(self):
        # shuffle the deck 
        # use random.shuffle()
        random.shuffle(self.cards)

    def deal_card(self):
        # deal a card object from the deck
        dealt = self.cards[0]
        self.cards.remove(dealt)
        return dealt
    
    def __str__(self):
        # return a string representing the deck
        in_deck = ' '
        for i in self.cards:
            in_deck += str(i) + ' '
        return 'Deck contains ' + in_deck


#define event handlers for buttons
def deal():
    global outcome, in_play, score, end, deck, player, dealer

    # your code goes here
    if in_play:
        outcome = 'You lose, new deal?'
        in_play = False
        end = True
        score -= 1
        
    else:
        deck = Deck()
        player = Hand()
        dealer = Hand()
        deck.shuffle()
        end = False
        
        c1 = deck.deal_card()
        player.add_card(c1)
        
        c2 = deck.deal_card()
        player.add_card(c2)
        
        c3 = deck.deal_card()
        dealer.add_card(c3)
        
        c4 = deck.deal_card()
        dealer.add_card(c4)
    
        print "Player's", player
        print "The value of the player's hand is", player.get_value()
        print ''
        print "Dealer's", dealer
        print "The value of the dealer's hand is", dealer.get_value()
        print ''
        outcome = 'Hit or stand?'    
        in_play = True

def hit():
    # replace with your code below
    global in_play, outcome, score, wins, loses, end, deck, player
    # if the hand is in play, hit the player
    
    if not end and player.get_value() <= 21:
        i = deck.deal_card()
        player.add_card(i)
        print "Player's", player
        print "The value of the player's hand is", player.get_value()
        print ''
        
    # if busted, assign a message to outcome, update in_play and score    
        if player.get_value() >= 21:
            print 'You have busted, you lose.'
            print ''
            outcome = 'You have busted, you lose. New again?'
            score -= 1
            in_play = False
            end = True
    
       
def stand():
    # replace with your code below
    global in_play, outcome, score, wins, loses, end, deck, player, dealer
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    # assign a message to outcome, update in_play and score
    in_play = False
    if not end and player.get_value() > 21:
        print 'You have busted, you lose.'
        print ''
        outcome = 'You busted! You lose, new deal?'
        
    elif not end and player.get_value() <= 21:
        while dealer.get_value() < 17:
            i = deck.deal_card()
            dealer.add_card(i)
            print "Dealer's", dealer
            print "The value of the dealer's hand is", dealer.get_value()
            print ''
        if dealer.get_value() > 21:
            print 'The dealer has busted. You win ^ ^'
            print ''
            outcome = 'The dealer has busted. You win, new deal?'
            score += 1
        else:
            if dealer.get_value() < player.get_value():
                print  'You win!'
                print ''
                outcome = 'You, win! New deal?'
                score += 1
            else:
                print 'Dealer wins!'
                print ''
                outcome= 'Dealer, wins! New deal?'
                score -= 1
                
    end = True      
    

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    global score, outcome, in_play, player_pos, player, dealer_pos, dealer
    
    canvas.draw_text('BLACK', [1, 550], 60, 'black')
    canvas.draw_text('JACK', [210, 550], 30, 'blue')
    card = Card("S", "J")
    card.draw(canvas, [150, 560])
    # score
    canvas.draw_text('Score:' + str(score), [230,580], 20, 'black')
    # player and dealer labels
    canvas.draw_text('Player', [player_pos[0],player_pos[1] - 5], 20, 'black')
    canvas.draw_text('Dealer', [dealer_pos[0], dealer_pos[1] - 5], 20, 'black')
    # outcome print
    canvas.draw_text(outcome, [player_pos[0] + 10,player_pos[1] + 150], 20, 'blue')
    
    canvas.draw_line([60,0],[60,500], 80, 'blue')
    canvas.draw_line([540,0],[540,500], 80, 'blue')    
    
    
    # player's hand
    if len(player.cards) > 0:
           for i in range(len(player.cards)):
                if i <= 5:
                    card = player.cards[i]
                    cur_pos = [CARD_SIZE[0] * i + player_pos[0], player_pos[1]]
                    player.cards[i].draw(canvas, cur_pos)
                    
    # dealer's hand
    if not in_play:
        for i in range(len(dealer.cards)):
                       card = dealer.cards[i]
                       cur_pos = [CARD_SIZE[0] * i + dealer_pos[0], dealer_pos[1]]
                       dealer.cards[i].draw(canvas, cur_pos)
                        
    else:
        card = dealer.cards[0]
        dealer.cards[0].draw(canvas, dealer_pos)
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE,[CARD_BACK_CENTER[0]+ dealer_pos[0] + CARD_SIZE[0], CARD_BACK_CENTER[1] + dealer_pos[1]], CARD_BACK_SIZE)                  




# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("cornflowerblue")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


