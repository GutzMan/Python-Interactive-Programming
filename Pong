# Implementation of classic arcade game Pong

'''
Instructions

The left paddle is controlled using the “W” and “S” keys and the right paddle is controlled using the up and down arrows.

'''


import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_vel = [-5, -5]
paddle1_pos = 240
paddle2_pos = 240
paddle1_vel = 0
paddle2_vel = 0
left_score = 0
right_score = 0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH/2 ,HEIGHT/2]
    x = random.randrange(120,240) / 60
    y = ball_vel[1] = random.randrange(60, 180) / 60
    if direction == RIGHT:
        ball_vel = [x, -y]
    else:
        ball_vel = [-x, -y]


# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    spawn_ball(LEFT)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
 
        
    # draw mid line and gutters
    # mid line
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "RED")
    # left gutter
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "Pink")
    # right gutter
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "Pink")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # update paddles with logic added to keep the paddles from going off screen
    if paddle1_pos >= 90:
        paddle1_pos += paddle1_vel
    else: 
        paddle1_pos = 91
    if paddle1_pos <= HEIGHT-1:
        paddle1_pos += paddle1_vel
    else:
        paddle1_pos = HEIGHT-2
        
    if paddle2_pos >= 90:
        paddle2_pos += paddle2_vel
    else: 
        paddle2_pos = 91
    if paddle2_pos <= HEIGHT-1:
        paddle2_pos += paddle2_vel
    else:
        paddle2_pos = HEIGHT-2
        
    
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 20, 'PINK', 'RED')
    # update paddle's vertical position, keep paddle on the screen
    
    # draw paddles
    canvas.draw_polygon([(PAD_WIDTH-5, paddle1_pos-80),(PAD_WIDTH-5, paddle1_pos), (PAD_WIDTH-5, paddle1_pos), (PAD_WIDTH-5, paddle1_pos-80)], 10, 'Pink')
    canvas.draw_polygon([(597, paddle2_pos-80), (597, paddle2_pos),(597, paddle2_pos),(597, paddle2_pos-80)], 10, 'Pink')

    # determine whether paddle and ball collide
    
    # Causes the ball to bounce of the top and bottom parts of the screen 
    if ball_pos[1] - 1 <= BALL_RADIUS or ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
     
    #Gutter Detection
    if ball_pos[0] - PAD_WIDTH <= BALL_RADIUS:
        if ball_pos[1] - PAD_WIDTH <= paddle1_pos + PAD_HEIGHT and ball_pos[1] >= paddle1_pos - PAD_HEIGHT:
            ball_vel[0] = - ball_vel[0] * 1.1
        else:
            global left_score
            spawn_ball(RIGHT)
            left_score += 1
            # print left_score
    elif ball_pos[0] + PAD_WIDTH >= (WIDTH - 1) - BALL_RADIUS:
        if ball_pos[1] - PAD_WIDTH <= paddle2_pos + PAD_HEIGHT and ball_pos[1] >= paddle2_pos - PAD_HEIGHT:
            ball_vel[0] = - ball_vel [0] * 1.1
        else:
            global right_score
            spawn_ball(LEFT)
            right_score += 1
            # print right_score
   
    # draw scores
    canvas.draw_text(str(right_score), (150, 100), 48, 'RED')
    canvas.draw_text(str(left_score),(400, 100), 48, 'RED')
def keydown(key):
    inc = 3
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel -= inc
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel += inc
        
    if key == simplegui.KEY_MAP['up']:
        paddle2_vel -= inc
    if key == simplegui.KEY_MAP['down']:
        paddle2_vel += inc
   
def keyup(key):
    inc = 3
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel += inc
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel -= inc
        
    if key == simplegui.KEY_MAP['up']:
        paddle2_vel += inc
    if key == simplegui.KEY_MAP['down']:
        paddle2_vel -= inc   
        
def reset():
    global left_score
    global right_score
    left_score = 0
    right_score = 0
    #randomly picks a side to spawn the ball
    side = random.randrange(0,2)
    if side == 1:
        spawn_ball(LEFT)
    else:
        spawn_ball(RIGHT)
    
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_canvas_background('darkred')
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
reset = frame.add_button('Reset', reset)


# start frame
new_game()
frame.start()
